package raspberry_central_data;

import com.pi4j.Pi4J;
import com.pi4j.context.Context;
import com.pi4j.io.gpio.digital.DigitalOutput;
import com.pi4j.io.i2c.I2C;
import com.pi4j.io.i2c.I2CConfig;
import com.pi4j.io.i2c.I2CProvider;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;

public class ThermalCameraApp {
    private static final int I2C_BUS = 1;  // I2C Bus (1 para Raspberry Pi)
    private static final int AMG8833_ADDRESS = 0x69;  // Endereço I2C da câmera AMG8833
    private static final int SERVO_PIN = 17;  // GPIO para o servo motor

    public static void main(String[] args) {
        // Inicializa o contexto Pi4J
        Context pi4j = Pi4J.newAutoContext();

        // Configura o I2C para a câmera AMG8833
        I2CProvider i2cProvider = pi4j.provider("linuxfs-i2c");
        I2CConfig i2cConfig = I2C.newConfigBuilder(pi4j)
                .id("amg8833")
                .bus(I2C_BUS)
                .device(AMG8833_ADDRESS)
                .build();
        I2C i2c = i2cProvider.create(i2cConfig);

        // Configura o pino GPIO para o servo motor
        DigitalOutput servo = pi4j.dout()
                .id("servo")
                .name("Servo Motor")
                .address(SERVO_PIN)
                .provider("pigpio-digital-output")
                .build();

        // Cria a interface Swing
        JFrame frame = new JFrame("AMG8833 Thermal Camera & Servo Control");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);

        // Painel para exibir dados térmicos
        JPanel thermalPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                try {
                    // Lê os dados térmicos da câmera AMG8833
                    byte[] buffer = new byte[64];
                    i2c.readRegister(0x80, buffer);  // Endereço de dados térmicos
                    int[] temperatures = Arrays.stream(buffer).map(b -> b & 0xFF).toArray();

                    // Renderiza a matriz de temperatura como um mapa de calor
                    int cellSize = 50;  // Tamanho de cada célula no mapa de calor
                    for (int row = 0; row < 8; row++) {
                        for (int col = 0; col < 8; col++) {
                            int temp = temperatures[row * 8 + col];
                            int color = (int) Math.min(255, temp * 2);  // Escala simples
                            g.setColor(new Color(color, 0, 255 - color));
                            g.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        thermalPanel.setPreferredSize(new Dimension(400, 400));

        // Painel para controle do servo motor
        JPanel servoPanel = new JPanel();
        JSlider servoSlider = new JSlider(0, 180);
        servoSlider.addChangeListener(e -> {
            int angle = servoSlider.getValue();
            // Calcula o PWM para a posição do servo
            int pwmValue = (int) (500 + (angle * 2000 / 180));
            servo.high();  // Ativa o pino do servo
            try {
                Thread.sleep(pwmValue / 1000);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            servo.low();  // Desativa o pino do servo
        });
        servoPanel.add(new JLabel("Servo Angle:"));
        servoPanel.add(servoSlider);

        // Adiciona os painéis à janela
        frame.add(thermalPanel, BorderLayout.CENTER);
        frame.add(servoPanel, BorderLayout.SOUTH);

        // Atualiza o painel de dados térmicos periodicamente
        Timer timer = new Timer(100, e -> thermalPanel.repaint());
        timer.start();

        // Exibe a janela
        frame.setVisible(true);
    }
}
