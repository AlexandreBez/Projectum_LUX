package raspberry_central_data.panels;

import javax.swing.*;
import com.pi4j.context.Context;
import com.pi4j.io.i2c.I2C;
import com.pi4j.io.i2c.I2CConfig;
import com.pi4j.io.i2c.I2CProvider;
import java.awt.*;
import java.util.Timer;
import java.util.TimerTask;

public class ThermalCameraPanel extends JPanel {

    private static final int I2C_BUS = 1;
    private static final int AMG8833_ADDRESS = 0x69;  

    private final int cameraRows;
    private final int cameraCols;
    private final I2C i2c; // I2C para comunicação com a câmera
    private double[][] temperatures; // Matriz de temperaturas

    public ThermalCameraPanel(int rows, int cols, Context pi4j) {
        // Configuração do I2C
        I2CProvider i2cProvider = pi4j.provider("linuxfs-i2c");
        this.i2c = i2cProvider.create(I2C.newConfigBuilder(pi4j)
                .id("amg8833")
                .bus(I2C_BUS)
                .device(AMG8833_ADDRESS)
                .build());

        this.cameraRows = rows;
        this.cameraCols = cols;
        this.temperatures = new double[rows][cols]; // Inicializa a matriz de temperaturas

        setBackground(Color.BLACK);
        setPreferredSize(new Dimension(900, 700));
        setAlignmentX(CENTER_ALIGNMENT);
        setAlignmentY(CENTER_ALIGNMENT);

        // Inicia o Timer para atualizar as temperaturas
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                updateTemperatures();
                SwingUtilities.invokeLater(() -> repaint()); // Redesenha o painel
            }
        }, 0, 1000); // Atualiza a cada 1 segundo
    }

    /**
     * Atualiza a matriz de temperaturas lendo os dados da câmera térmica.
     */
    private void updateTemperatures() {
        try {
            byte[] buffer = new byte[64 * 2];
            i2c.readRegister(0x80, buffer, 0, buffer.length);

            for (int i = 0; i < 64; i++) {
                int tempRaw = ((buffer[i * 2 + 1] & 0xFF) << 8) | (buffer[i * 2] & 0xFF);
                temperatures[i / 8][i % 8] = tempRaw * 0.25; // Conversão para Celsius
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Renderiza o mapa de calor
        int cellWidth = getWidth() / cameraCols;
        int cellHeight = getHeight() / cameraRows;

        for (int row = 0; row < cameraRows; row++) {
            for (int col = 0; col < cameraCols; col++) {
                double temp = temperatures[row][col];
                int colorValue = Math.min(255, (int) (temp * 2)); // Escala simples
                g.setColor(new Color(colorValue, 0, 255 - colorValue));
                g.fillRect(col * cellWidth, row * cellHeight, cellWidth, cellHeight);
            }
        }
    }
}
